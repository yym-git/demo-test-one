使用线程池的优势：
1、降低资源的消耗：可以重复利用已经创建好的线程，避免了线程的创建和销毁的资源消耗。
2、提高响应速度：任务到达时，可直接使用已经创建好的线程，而不需要创建新的线程，可以直接运行。
3、提高线程的可管理性：线程是稀缺资源，如果不加以限制会导致系统资源的无节制消耗，降低系统的稳定性。使用线程池可以统一的分配、调度
管理线程。

Executors.newCachedThreadPool()；会根据具体的处理情况来决定是否需要新开线程，最大线程数为Integer_MAX_VALUE

线程池的7大参数：
corePoolSize：核心线程数，线程池中常驻线程数
maximumPoolSize：最大线程数，线程池中能够容纳的同时执行的最大线程数，此值必须大于1
keepAliveTime：多余的线程空闲的存活时间
TimeUnit：存活时间单位
BlockingQueue<Runnable>：任务队列（阻塞队列），已经提交但是未被执行的任务
ThreadFactory：线程工厂，用于生成线程池中的线程，一般默认
RejectedExecutionHandler：决绝策略，队列满了，并且工作线程大于等于最大线程数时，采取的处理方式

说明：当达到核心线程数，阻塞队列满了，且小于最大线程数时，会新开线程来处理新达到的任务

拒绝策略：
AbortPolicy：默认，直接抛出RejectedExecutionException异常阻止系统正常运行
CallerRunsPolicy：由调用方所在线程处理任务
DiscardOldestPolicy：抛弃任务队列中存在时间最久的任务
DiscardPolicy：直接丢弃任务，不做任何处理，也不抛出异常

如何合理设置线程池的最大线程数：

CPU密集型：CPU核数 +  1
IO密集型：频繁操作数据库或者redis的情况
参考公式：CPU/(1-阻塞系数)  阻塞系数在0.8~0.9之间
如8核CPU：8/(1-0.9) = 90
